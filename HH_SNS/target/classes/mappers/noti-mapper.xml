<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.spring.ex06.NotiMapper">
	<!-- ★ ${key 이름} : mybatis-config.xml의 property - name(vo)과 매칭. DB 테이블의 
		컬럼 ★ #{key 이름} : dao 클래스의 sqlSession에서 전송받은 데이터 변수명(입력받은 데이터) -->


	<!-- 
		INSERT INTO [테이블명] values([시퀀스명].NEXTVAL, 'test');
	 -->
	 
	 <!-- 인서트 -->
	 <insert id="insert">
	 	insert into ${noti}
	 	values (noti_seq.nextval, #{senderId}, #{receiverId}, #{notiCategory}, 0, #{feedId} )
	 </insert>
	 
	 <!-- 회원 알림 사항 체크 -->
	 <select id="select_check" resultType="Integer">
	 	select count(${senderId}) from ${noti}
	 	where ${notiRead} = 0 and ${receiverId} = #{receiverId}
	 </select>
	 <!-- 회원 알람 내용 조회 -->
	 <select id="select_list" resultType="NotiVO">
	 	select ${notiId}, ${senderId}, ${receiverId}, ${notiCategory}, ${notiRead}, ${feedId} from ${noti}
	 	where  ${receiverId} = #{receiverId} order by ${notiId} desc
	 </select>
	
	<!--  회원 알람 확인 상태로 변경 -->
	<update id="update">
		update ${noti}
		set ${notiRead} = #{notiRead} 
		where ${notiId} = #{notiId}
	</update>
	
	<!--  회원 알람 삭제 
	<delete id="delete">
		delete from ${noti}
		where ${notiId} = #{notiId} 
	</delete>
	-->
	
	<!--  회원 팔로우 알람 삭제 -->
	<delete id="delete">
		delete from ${noti}
		where ${senderId} = #{senderId} and ${receiverId} = #{receiverId} and ${notiCategory} = 'follow'
	</delete>
	<!--
	
	<insert id="insert">
		insert into ${feed}
		values (FEED_SEQ.NEXTVAL, #{feedContent}, #{userId}, #{userNickname}, #{userProfile}, 0, 0, sysdate, #{musicTitle}, #{feedPhoto})
	</insert>
		
	<select id="select_all" resultType="FeedVO">
	 	select ${feedId}, ${feedContent}, ${userId}, ${userNickname}, ${userProfile},  
	 	${replyCount}, ${likeCount}, ${feedDate}, ${musicTitle}, ${feedPhoto} from ${feed}
	 	order by ${feedDate} desc
	 </select>
	 
	 <select id="select_all_by_userid" resultType="FeedVO">
	 	select ${feedId}, ${feedContent}, ${userId}, ${userNickname}, ${userProfile},  
	 	${replyCount}, ${likeCount}, ${feedDate}, ${musicTitle}, ${feedPhoto} from ${feed}
	 	where ${userId} = #{userId}
	 	order by ${feedDate} desc
	 </select>
	 
	 <select id="select" resultType="FeedVO">
		select ${feedId}, ${feedContent}, ${userId}, ${userNickname}, ${userProfile},  
	 	${replyCount}, ${likeCount}, ${feedDate}, ${musicTitle}, ${feedPhoto} from ${feed}
		where ${feedId} = #{feedId}
	 </select>
	 
	 <select id="select_by_userid" resultType="FeedVO">
		select ${feedId}, ${feedContent}, ${userId}, ${userNickname}, ${userProfile},  
	 	${replyCount}, ${likeCount}, ${feedDate}, ${musicTitle}, ${feedPhoto} from ${feed}
		where ${userId} = #{userId}
	 </select>
	
	 <update id="update_content">
	 	update ${feed} 
	 	set 
	 	${feedContent} = #{feedContent}
	 	where ${feedId} = #{feedId}
	 </update>
	 
	 <delete id="delete">
	 	delete from ${feed}
	 	where ${feedId} = #{feedId}
	 </delete>
	 
	 <select id="total_like" resultType="Integer">
		select count(*) total_like from ${feed}
	</select>
	
	<update id="update_like_cnt">
		update ${feed} 
		set ${likeCount} = ${likeCount} + #{amount} 
		where ${feedId} = #{feedId}
	</update>
	
	<update id="update_reply_cnt">
		update ${feed}
		set ${replyCount} = ${replyCount} + #{amount}
		where ${feedId} = #{feedId}
	</update>
	
	<update id="update_profile">
		update ${feed}
		set ${userNickname} = #{userNickname}, ${userProfile} = #{userProfile}
		where ${userId} = #{userId}
	</update>
	 -->

</mapper>